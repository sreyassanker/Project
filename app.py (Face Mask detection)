from flask import Flask, render_template, Response
import cv2
import numpy as np
from tensorflow.keras.models import load_model
from playsound import playsound
import threading

app = Flask(__name__)
model = load_model("mask_detector_model.h5")
face_cascade = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")
camera = cv2.VideoCapture(0)

# Global flag to track if alert has been played
alert_played = False

def play_alert():
    playsound("static/alert.mp3")

def generate_frames():
    global alert_played  # Needed to modify the global flag
    while True:
        success, frame = camera.read()
        if not success:
            break
        else:
            faces = face_cascade.detectMultiScale(frame, 1.1, 4)
            for (x, y, w, h) in faces:
                face_img = frame[y:y+h, x:x+w]
                resized = cv2.resize(face_img, (128, 128))
                normalized = resized / 255.0
                reshaped = np.reshape(normalized, (1, 128, 128, 3))

                result = model.predict(reshaped)[0][0]

                if result >= 0.5:
                    label = "No Mask"
                    color = (0, 0, 255)
                    if not alert_played:
                        threading.Thread(target=play_alert).start()
                        alert_played = True
                else:
                    label = "Mask"
                    color = (0, 255, 0)
                    alert_played = False  # Reset flag when mask is detected again

                cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
                cv2.putText(frame, label, (x, y - 10),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)

            _, buffer = cv2.imencode('.jpg', frame)
            frame_bytes = buffer.tobytes()
            yield (b'--frame\r\n'
                   b'Content-Type: image/jpeg\r\n\r\n' + frame_bytes + b'\r\n')

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/video')
def video():
    return Response(generate_frames(),
                    mimetype='multipart/x-mixed-replace; boundary=frame')

if __name__ == "__main__":
    app.run(debug=True)
